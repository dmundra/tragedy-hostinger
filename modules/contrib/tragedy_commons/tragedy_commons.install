<?php

/**
 * @file
 * Contains install and update functions for Tragedy Commons games.
 */

use Drupal\Core\Database\Database;

/**
 * Implements hook_schema().
 */
function tragedy_commons_schema() {
  $schema['tragedy_commons_multi'] = [
    'description' => 'Stores tragedy commons multi player game requests.',
    'fields' => [
      'gid' => [
        'description' => 'Primary Key: Unique game ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'firstname' => [
        'description' => 'The first name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'lastname' => [
        'description' => 'The last name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'email' => [
        'description' => 'The e-mail address.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'institution' => [
        'description' => 'The institution.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'description' => [
        'description' => 'A description.',
        'type' => 'text',
        'not null' => FALSE,
      ],
      'status' => [
        'description' => 'Status.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'created' => [
        'description' => 'A timestamp with millisecond precision indicating when the request entry was created.',
        'type' => 'numeric',
        'precision' => 14,
        'scale' => 3,
        'not null' => TRUE,
        'default' => 0,
      ],
      'updated' => [
        'description' => 'A timestamp with millisecond precision indicating when the request entry was updated.',
        'type' => 'numeric',
        'precision' => 14,
        'scale' => 3,
        'not null' => TRUE,
        'default' => 0,
      ],
      'test' => [
        'description' => 'Boolean indicating whether this request is a test.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
    ],
    'primary key' => ['gid'],
  ];
  $schema['tragedy_commons_multi_player'] = [
    'description' => 'Stores tragedy commons multi player game player details.',
    'fields' => [
      'pid' => [
        'description' => 'Primary Key: Unique player ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'gid' => [
        'description' => 'The {tragedy_commons_multi}.gid this player is playing on.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'firstname' => [
        'description' => 'The first name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'lastname' => [
        'description' => 'The last name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'started' => [
        'description' => 'A timestamp with millisecond precision indicating when the player entry was created.',
        'type' => 'numeric',
        'precision' => 14,
        'scale' => 3,
        'not null' => TRUE,
        'default' => 0,
      ],
      'test' => [
        'description' => 'Boolean indicating whether this player is testing.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
    ],
    'primary key' => ['pid', 'gid'],
    'foreign keys' => [
      'tragedy_commons_multi' => [
        'table' => 'tragedy_commons_multi',
        'columns' => [
          'gid' => 'gid',
        ],
      ],
    ],
  ];
  $schema['tragedy_commons_multi_round'] = [
    'description' => 'Stores tragedy commons multi player game round details.',
    'fields' => [
      'rid' => [
        'description' => 'Primary Key: Unique round ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'gid' => [
        'description' => 'The {tragedy_commons_multi}.gid this player is playing on.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'pid' => [
        'description' => 'The {tragedy_commons_multi_player}.pid this round is playing on.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'cows' => [
        'description' => 'The number of cows.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'started' => [
        'description' => 'A timestamp with millisecond precision indicating when the player entry was created.',
        'type' => 'numeric',
        'precision' => 14,
        'scale' => 3,
        'not null' => TRUE,
        'default' => 0,
      ],
      'test' => [
        'description' => 'Boolean indicating whether this player is testing.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
      'completed' => [
        'description' => 'Boolean indicating whether this round is completed.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
      'updated' => [
        'description' => 'A timestamp with millisecond precision indicating when the request entry was updated.',
        'type' => 'numeric',
        'precision' => 14,
        'scale' => 3,
        'not null' => TRUE,
        'default' => 0,
      ],
      'show_names' => [
        'description' => 'Boolean indicating whether to show names.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
      'round_number' => [
        'description' => 'The number of the round.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'primary key' => ['rid', 'gid', 'pid'],
    'foreign keys' => [
      'tragedy_commons_multi' => [
        'table' => 'tragedy_commons_multi',
        'columns' => [
          'gid' => 'gid',
        ],
      ],
      'tragedy_commons_multi_player' => [
        'table' => 'tragedy_commons_multi_player',
        'columns' => [
          'pid' => 'pid',
        ],
      ],
    ],
  ];
  return $schema;
}

/**
 * Adds tragedy_commons_multi database table for tracking requests.
 */
function tragedy_commons_update_8001(&$sandbox) {
  $tragedy_commons_schema = tragedy_commons_schema();
  $schema = Database::getConnection()->schema();
  if (!$schema->tableExists('tragedy_commons_multi')) {
    $schema->createTable('tragedy_commons_multi', $tragedy_commons_schema['tragedy_commons_multi']);
  }
}

/**
 * Adds created and updated date columns to table for tracking request dates.
 */
function tragedy_commons_update_8002(&$sandbox) {
  $schema = Database::getConnection()->schema();
  if (!$schema->fieldExists('tragedy_commons_multi', 'created')) {
    $created_spec = [
      'description' => 'A timestamp with millisecond precision indicating when the request entry was created.',
      'type' => 'numeric',
      'precision' => 14,
      'scale' => 3,
      'not null' => TRUE,
      'default' => 0,
    ];
    $schema->addField('tragedy_commons_multi', 'created', $created_spec);
  }
  if (!$schema->fieldExists('tragedy_commons_multi', 'updated')) {
    $updated_spec = [
      'description' => 'A timestamp with millisecond precision indicating when the round was updated.',
      'type' => 'numeric',
      'precision' => 14,
      'scale' => 3,
      'not null' => TRUE,
      'default' => 0,
    ];
    $schema->addField('tragedy_commons_multi', 'updated', $updated_spec);
  }
}

/**
 * Adds tragedy_commons_multi_player database table for tracking players.
 */
function tragedy_commons_update_8003(&$sandbox) {
  $tragedy_commons_schema = tragedy_commons_schema();
  $schema = Database::getConnection()->schema();
  if (!$schema->tableExists('tragedy_commons_multi_player')) {
    $schema->createTable('tragedy_commons_multi_player', $tragedy_commons_schema['tragedy_commons_multi_player']);
  }
}

/**
 * Adds tragedy_commons_multi_round database table for tracking rounds.
 */
function tragedy_commons_update_8004(&$sandbox) {
  $tragedy_commons_schema = tragedy_commons_schema();
  $schema = Database::getConnection()->schema();
  if (!$schema->tableExists('tragedy_commons_multi_round')) {
    $schema->createTable('tragedy_commons_multi_round', $tragedy_commons_schema['tragedy_commons_multi_round']);
  }
}

/**
 * Add completed and updated date columns to table for tracking rounds.
 */
function tragedy_commons_update_8005(&$sandbox) {
  $schema = Database::getConnection()->schema();
  if (!$schema->fieldExists('tragedy_commons_multi_round', 'completed')) {
    $completed_spec = [
      'description' => 'Boolean indicating whether this round is completed.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
      'size' => 'tiny',
    ];
    $schema->addField('tragedy_commons_multi_round', 'completed', $completed_spec);
  }
  if (!$schema->fieldExists('tragedy_commons_multi_round', 'updated')) {
    $updated_spec = [
      'description' => 'A timestamp with millisecond precision indicating when the round was updated.',
      'type' => 'numeric',
      'precision' => 14,
      'scale' => 3,
      'not null' => TRUE,
      'default' => 0,
    ];
    $schema->addField('tragedy_commons_multi_round', 'updated', $updated_spec);
  }
}

/**
 * Add show names and round number columns to table for tracking rounds.
 */
function tragedy_commons_update_8006(&$sandbox) {
  $schema = Database::getConnection()->schema();
  if (!$schema->fieldExists('tragedy_commons_multi_round', 'show_names')) {
    $show_names_spec = [
      'description' => 'Boolean indicating whether to show names.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
      'size' => 'tiny',
    ];
    $schema->addField('tragedy_commons_multi_round', 'show_names', $show_names_spec);
  }
  if (!$schema->fieldExists('tragedy_commons_multi_round', 'round_number')) {
    $round_number_spec = [
      'description' => 'The number of the round.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ];
    $schema->addField('tragedy_commons_multi_round', 'round_number', $round_number_spec);
  }
}

/**
 * Add test columns to table for tracking requests.
 */
function tragedy_commons_update_8007(&$sandbox) {
  $schema = Database::getConnection()->schema();
  if (!$schema->fieldExists('tragedy_commons_multi', 'test')) {
    $test_spec = [
      'description' => 'Boolean indicating whether this request is a test.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
      'size' => 'tiny',
    ];
    $schema->addField('tragedy_commons_multi', 'test', $test_spec);
  }
}
